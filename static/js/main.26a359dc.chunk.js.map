{"version":3,"sources":["API.js","Axios.js","Row/Row.js","Banner/Banner.js","Nav/Nav.js","ClickBanner/ClickBanner.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","genre","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","props","largeRow","title","fetchUrl","setClick","setGetName","useState","movies","setMovies","useEffect","a","get","res","data","results","getdata","mouseOvermovie","setMouseOverMovie","id","map","movie","className","src","backdrop_path","poster_path","alt","name","onMouseOver","onMouseOut","onClick","Banner","setMovie","Math","floor","random","length","getData","age","style","backgroundSize","backgroundImage","backgroundPosition","overview","vote_average","genre_ids","value","Nav","click","handleShow","setHandleShow","window","addEventListener","scrollY","width","ClickBanner","val","original_language","App","getName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26a359dc.chunk.js","sourcesContent":["const API_KEY = '04578618b6c6b9de46d1065c94ee22cd';\r\n\r\nconst genre = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default genre;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import axios from \"../Axios\";\r\nimport React, { useState, useEffect, Fragment } from \"react\";\r\nimport \"../Row/Row.css\";\r\n\r\n\r\nfunction Row(props) {\r\n  const baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n  const { largeRow, title, fetchUrl, setClick, setGetName } = props;\r\n\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getdata() {\r\n      const res = await axios.get(fetchUrl);\r\n      setMovies(res.data.results);\r\n      //console.log(movies);\r\n    }\r\n    getdata();\r\n  }, [fetchUrl]);\r\n\r\n  const [mouseOvermovie, setMouseOverMovie] = useState(false);\r\n  const onMouseOverHandler = (movie) => {\r\n    if (!mouseOvermovie) {\r\n      //console.log(movie);\r\n      setMouseOverMovie(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <div id=\"row_posters\">\r\n        {movies.map((movie) => {\r\n          return (\r\n            <Fragment>\r\n              <img\r\n                className={`row_poster ${largeRow ? \"rowposterLarge\" : \"\"}`}\r\n                key={movie?.id}\r\n                src={`${baseURL}${\r\n                  largeRow ? movie?.backdrop_path : movie?.poster_path\r\n                }`}\r\n                alt={movie?.name}\r\n                onMouseOver={() => onMouseOverHandler(movie)}\r\n                onMouseOut={() => setMouseOverMovie(false)}\r\n                onClick={() => {\r\n                  setClick(true);\r\n                  setGetName(movie);\r\n                }}\r\n              />\r\n            </Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import axios from \"../Axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport genre from \"../API\";\r\nimport \"../Banner/Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const res = await axios.get(genre.fetchNetflixOriginals);\r\n      setMovie(\r\n        res.data.results[\r\n          Math.floor(Math.random() * res.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    getData();\r\n  }, []);\r\n  var age = \"16+\";\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className=\"movie_name\">{movie.name}</h1>\r\n        <button className=\"banner_button\">Play</button>\r\n        <button className=\"banner_button\">My List</button>\r\n        <p className=\"desc\">{movie.overview}</p>\r\n        <div className=\"filmdata\">\r\n          <span>\r\n            IMDB Rating <b>{movie.vote_average}/10</b>\r\n          </span>\r\n\r\n          <b>\r\n            {movie.genre_ids?.map((value) => {\r\n              if (value === 18) {\r\n                age = \"18+\";\r\n              }\r\n            })}\r\n            <span className=\"ageres\">{age}</span>\r\n          </b>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../Nav/Nav.css\";\r\n\r\nfunction Nav({click, setClick}) {\r\n  const [handleShow, setHandleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setHandleShow(true);\r\n      } else {\r\n        setHandleShow(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <nav className= {handleShow && \"bg-clr\"}>\r\n      <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/255px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Neflix_logo\"\r\n        width=\"80px\"\r\n        className=\"icon\"\r\n        onClick={() => setClick(false)}\r\n      />\r\n\r\n      <img\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"Netflix_avatar\"\r\n        width=\"30px\"\r\n        className=\"avatar\"\r\n      />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React, { Fragment } from \"react\";\r\nimport \"../ClickBanner/ClickBanner.css\";\r\n\r\nfunction ClickBanner({ movie }) {\r\n  var val = \"16+\";\r\n  let overview = movie.overview;\r\n  return (\r\n    <Fragment>\r\n      <header\r\n        className=\"banner\"\r\n        style={{\r\n          backgroundSize: \"cover\",\r\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie.backdrop_path}\")`,\r\n          backgroundPosition: \"center center\",\r\n        }}\r\n      >\r\n        <div className=\"banner-contents\">\r\n          <h1>\r\n            {movie?.name || movie?.title}({movie.original_language})\r\n          </h1>\r\n          <p>{overview}</p>\r\n          <button>Watch</button>\r\n          <div className=\"film-data\">\r\n            <span>\r\n              IMDB Rating <b>{movie.vote_average}/10</b>\r\n            </span>\r\n            <b>\r\n              {movie.genre_ids.map((value) => {\r\n                if (value === 18) {\r\n                  val = \"18+\";\r\n                }\r\n              })}\r\n              <span className=\"ageres\">{val}</span>\r\n            </b>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ClickBanner;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport genre from \"./API\";\nimport Row from \"./Row/Row\";\nimport Banner from \"./Banner/Banner\";\nimport Nav from \"./Nav/Nav\";\nimport ClickBanner from \"./ClickBanner/ClickBanner\";\n// import { Link } from \"react-router-dom\";\n// import { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  const [click, setClick] = useState(false);\n  const [getName, setGetName] = useState([]);\n  return (\n    <div className=\"App\">\n      {/* Nav Bar */}\n      <Nav click={click} setClick={setClick} />\n\n      {click ? (\n        <ClickBanner movie={getName} />\n      ) : (\n        <div>\n          {/* Netflix Banner */}\n          <Banner />\n\n          {/* Netflix Rows */}\n          <section>\n            <Row\n              largeRow={false}\n              title=\"Netflix Originals\"\n              fetchUrl={genre.fetchNetflixOriginals}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Trending Now\"\n              fetchUrl={genre.fetchTrending}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Top Rated\"\n              fetchUrl={genre.fetchTopRated}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Action Movies\"\n              fetchUrl={genre.fetchActionMovies}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Comedy Movies\"\n              fetchUrl={genre.fetchComedyMovies}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Horror Movies\"\n              fetchUrl={genre.fetchHorrorMovies}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Romance Movies\"\n              fetchUrl={genre.fetchRomanceMovies}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n            <Row\n              largeRow={true}\n              title=\"Documentaries\"\n              fetchUrl={genre.fetchDocumentaries}\n              click={click}\n              setClick={setClick}\n              getName={getName}\n              setGetName={setGetName}\n            />\n          </section>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}